plugins {
    id 'java'
    id 'jacoco'
    id 'nebula.release' version '13.0.0'
    id 'maven-publish'
    id 'signing'
}

group 'io.github.microservice-api-patterns'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

if (!project.hasProperty('signing.secretKeyRingFile')) {
    project.ext.'signing.secretKeyRingFile' = "${rootDir}/secret-key.gpg"
}

dependencies {
    implementation group: 'org.freemarker', name: 'freemarker', version: freemarkerVersion

    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: jUnitVersion
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: jUnitVersion
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: jUnitVersion
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    archiveClassifier = 'sources'
}

task javadocJar(type: Jar) {
    from javadoc
    archiveClassifier = 'javadoc'
}

artifacts {
    archives javadocJar, sourcesJar
}

signing {
    sign configurations.archives
    required { gradle.taskGraph.hasTask("publishMavenJavaPublicationToMavenLocal") || gradle.taskGraph.hasTask("publishMavenJavaPublicationToMavenRepository") }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            customizePom(pom)

            artifactId = "${project.name}"
            groupId = "${project.group}"
            version = "${project.version}"
            from components.java
            artifact sourcesJar
            artifact javadocJar

            pom.withXml {
                def pomFile = file("${project.buildDir}/generated-pom.xml")
                writeTo(pomFile)
                def pomAscFile = signing.sign(pomFile).signatureFiles[0]
                artifact(pomAscFile) {
                    classifier = null
                    extension = 'pom.asc'
                }
            }

            signArchives.signatures.each { signature ->
                artifact(signature) {
                    def matcher = signature.file =~ /-(sources|javadoc)\.jar\.asc$/
                    if (matcher.find()) {
                        classifier = matcher.group(1)
                    } else {
                        classifier = null
                    }
                    extension = signature.type
                }
            }
        }
    }
    repositories {
        maven {
            def releasesRepoUrl = "${ossReleaseStagingRepository}"
            def snapshotsRepoUrl = "${ossSnapshotRepository}"
            url = project.version.toString().endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

            credentials {
                username = System.getenv('OSSRH_USERNAME')
                password = System.getenv('OSSRH_PASSWORD')
            }
        }
    }
}

def customizePom(pom) {
    pom.withXml {
        def root = asNode()

        // eliminate test-scoped dependencies
        root.dependencies.removeAll { dep ->
            dep.scope == "test"
        }

        root.children().last() + {
            resolveStrategy = Closure.DELEGATE_FIRST

            description 'A Java Library to Generate/Serialize Protocol Buffer Files (*.proto files)'
            name 'protobufgen'
            url 'https://github.com/Microservice-API-Patterns/protobufgen'
            organization {
                name 'Microservice API Patterns'
                url 'https://github.com/Microservice-API-Patterns/'
            }
            issueManagement {
                system 'GitHub'
                url 'https://github.com/Microservice-API-Patterns/protobufgen/issues'
            }
            licenses {
                license {
                    name 'Apache License 2.0'
                    url 'https://github.com/Microservice-API-Patterns/protobufgen/blob/master/LICENSE'
                    distribution 'repo'
                }
            }
            scm {
                url 'https://github.com/Microservice-API-Patterns/protobufgen'
                connection 'scm:git:git://github.com/Microservice-API-Patterns/protobufgen.git'
                developerConnection 'scm:git:ssh://git@github.com:Microservice-API-Patterns/protobufgen.git'
            }
            developers {
                developer {
                    name 'Stefan Kapferer'
                    email 'stefan@kapferer.ch'
                }
            }
        }
    }
}

tasks.withType(GenerateModuleMetadata) {
    enabled = false
}

test {
    useJUnitPlatform()
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled false
    }
}

check.dependsOn jacocoTestReport

model {
    tasks.generatePomFileForMavenJavaPublication {
        destination = file("$buildDir/generated-pom.xml")
    }
    tasks.publishMavenJavaPublicationToMavenLocal {
        dependsOn project.tasks.signArchives
    }
    tasks.publishMavenJavaPublicationToMavenRepository {
        dependsOn project.tasks.signArchives
    }
}
